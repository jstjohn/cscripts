// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2010, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================


#ifndef SEQAN_HEADER_BAM_IO_GENERATED_FORWARDS_H 
#define SEQAN_HEADER_BAM_IO_GENERATED_FORWARDS_H 

//////////////////////////////////////////////////////////////////////////////
// NOTE: This file is automatically generated by build_forwards.py
//       Do not edit this file manually!
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// CLASSES
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// BaiBamIndexBinData_

struct BaiBamIndexBinData_;       	// "extras/include/seqan/bam_io/bam_index_bai.h"(78)

//____________________________________________________________________________
// Bai_

struct Bai_;       	// "extras/include/seqan/bam_io/bam_index_bai.h"(74)

//____________________________________________________________________________
// BamAlignmentRecord

class BamAlignmentRecord;       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(181)

//____________________________________________________________________________
// BamHeader

class BamHeader;       	// "extras/include/seqan/bam_io/bam_header_record.h"(174)

//____________________________________________________________________________
// BamHeaderRecord

class BamHeaderRecord;       	// "extras/include/seqan/bam_io/bam_header_record.h"(135)

//____________________________________________________________________________
// BamIOContext

template <typename TNameStore_, typename TNameStoreCache_ > class BamIOContext;       	// "extras/include/seqan/bam_io/bam_io_context.h"(92)

//____________________________________________________________________________
// BamIndex

template <typename TSpec> class BamIndex;       	// "extras/include/seqan/bam_io/bam_index_base.h"(59)

//____________________________________________________________________________
// BamTagsDict

class BamTagsDict;       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(87)

//____________________________________________________________________________
// Bam_

struct Bam_;       	// "extras/include/seqan/bam_io/read_bam.h"(61)

//____________________________________________________________________________
// SamAlignment_

struct SamAlignment_;       	// "extras/include/seqan/bam_io/read_sam.h"(69)

//____________________________________________________________________________
// SamHeader_

struct SamHeader_;       	// "extras/include/seqan/bam_io/read_sam.h"(66)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// TYPEDEFS
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// Bai

typedef Tag<Bai_> Bai;       	// "extras/include/seqan/bam_io/bam_index_bai.h"(75)

//____________________________________________________________________________
// Bam

typedef Tag<Bam_> Bam;       	// "extras/include/seqan/bam_io/read_bam.h"(62)

//____________________________________________________________________________
// SamAlignment

typedef Tag<SamAlignment_> SamAlignment;       	// "extras/include/seqan/bam_io/read_sam.h"(70)

//____________________________________________________________________________
// SamHeader

typedef Tag<SamHeader_> SamHeader;       	// "extras/include/seqan/bam_io/read_sam.h"(67)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// _assignTagsBamToSamOneTag

template <typename TTarget, typename TSourceIter> void _assignTagsBamToSamOneTag(TTarget & target, TSourceIter & it, std::stringstream & ss);       	// "extras/include/seqan/bam_io/bam_sam_conversion.h"(352)

//____________________________________________________________________________
// _assignTagsSamToBamOneTag

template <typename TTarget, typename TRecordReader> void _assignTagsSamToBamOneTag(TTarget & target, TRecordReader & reader, CharString & buffer);       	// "extras/include/seqan/bam_io/bam_sam_conversion.h"(64)

//____________________________________________________________________________
// _baiAddAlignmentChunkToBin

inline void _baiAddAlignmentChunkToBin(BamIndex<Bai> & index, __uint32 currBin, __uint32 currOffset, __uint64 prevOffset);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(455)

//____________________________________________________________________________
// _baiReg2bins

static inline void _baiReg2bins(String<__uint16> & list, __uint32 beg, __uint32 end);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(153)

//____________________________________________________________________________
// _dataHost

inline Holder<CharString> & _dataHost(BamTagsDict & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(271)

//____________________________________________________________________________
// _reg2Bin

static inline int _reg2Bin(uint32_t beg, uint32_t end);       	// "extras/include/seqan/bam_io/write_bam.h"(125)

//____________________________________________________________________________
// _toBamTagValue

template <typename T> bool _toBamTagValue(CharString & result, T const & val, char const typeC);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(640)

//____________________________________________________________________________
// _writeIndex

inline int _writeIndex(BamIndex<Bai> const & index, char const * filename);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(394)

//____________________________________________________________________________
// assignTagsBamToSam

template <typename TTarget, typename TSource> void assignTagsBamToSam(TTarget & target, TSource const & source);       	// "extras/include/seqan/bam_io/bam_sam_conversion.h"(629)

//____________________________________________________________________________
// assignTagsSamToBam

template <typename TTarget, typename TSource> void assignTagsSamToBam(TTarget & target, TSource & source);       	// "extras/include/seqan/bam_io/bam_sam_conversion.h"(319)

//____________________________________________________________________________
// bamRecordToAlignment

template <typename TSource, typename TSpec, typename TReference> void bamRecordToAlignment(Align<TSource, TSpec> & result, TReference & reference, BamAlignmentRecord & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(171)

//____________________________________________________________________________
// buildIndex

inline bool buildIndex(BamIndex<Bai> & index, char const * filename);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(476)
inline void buildIndex(BamTagsDict & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(224)

//____________________________________________________________________________
// clear

inline void clear(BamAlignmentRecord & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(222)
inline void clear(BamHeaderRecord & record);       	// "extras/include/seqan/bam_io/bam_header_record.h"(198)

//____________________________________________________________________________
// clippedQualInfix

inline Infix<CharString>::Type clippedQualInfix(BamAlignmentRecord & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(128)
inline Infix<CharString const>::Type clippedQualInfix(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(136)

//____________________________________________________________________________
// clippedSeqInfix

inline Infix<CharString>::Type clippedSeqInfix(BamAlignmentRecord & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(103)
inline Infix<CharString const>::Type clippedSeqInfix(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(111)

//____________________________________________________________________________
// eraseTag

inline bool eraseTag(BamTagsDict & tags, CharString const & key);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(734)

//____________________________________________________________________________
// extractTagValue

template <typename TDest, typename TIdx> inline bool extractTagValue(TDest & dest, BamTagsDict & tags, TIdx idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(479)

//____________________________________________________________________________
// findTagKey

inline bool findTagKey(unsigned & idx, CharString const & key, BamHeaderRecord const & record);       	// "extras/include/seqan/bam_io/bam_header_record.h"(226)
inline bool findTagKey(unsigned & idx, BamTagsDict & tags, CharString const & name);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(381)
inline bool findTagKey(unsigned & idx, BamTagsDict const & tags, CharString const & name);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(390)

//____________________________________________________________________________
// getAlignmentLengthInRef

inline unsigned getAlignmentLengthInRef(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(589)

//____________________________________________________________________________
// getBamTypeChar

template <typename T> inline char getBamTypeChar();       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(567)

//____________________________________________________________________________
// getBamTypeSize

inline int getBamTypeSize(char c);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(183)

//____________________________________________________________________________
// getClippedPos

inline bool getClippedPos(unsigned & posBegin, unsigned & posEnd, BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record_util.h"(67)

//____________________________________________________________________________
// getSortOrder

inline BamSortOrder getSortOrder(BamHeader const & header);       	// "extras/include/seqan/bam_io/bam_header_record.h"(290)

//____________________________________________________________________________
// getTagKey

template <typename TPos> inline Infix<Host<BamTagsDict>::Type>::Type getTagKey(BamTagsDict & tags, TPos idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(350)
template <typename TPos> inline Infix<Host<BamTagsDict const>::Type>::Type getTagKey(BamTagsDict const & tags, TPos idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(359)

//____________________________________________________________________________
// getTagType

template <typename TPos> inline char getTagType(BamTagsDict & tags, TPos idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(325)

//____________________________________________________________________________
// getTagValue

inline bool getTagValue(CharString & value, unsigned idx, BamHeaderRecord const & record);       	// "extras/include/seqan/bam_io/bam_header_record.h"(266)
inline bool getTagValue(CharString & value, CharString const & key, BamHeaderRecord const & record);       	// "extras/include/seqan/bam_io/bam_header_record.h"(275)
template <typename TIdx> inline CharString getTagValue(BamTagsDict & tags, TIdx idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(413)
template <typename TPos> inline CharString getTagValue(BamTagsDict const & tags, TPos idx);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(452)

//____________________________________________________________________________
// getUnalignedCount

inline __uint64 getUnalignedCount(BamIndex<Bai> const & index);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(259)

//____________________________________________________________________________
// hasFlagAllProper

inline bool hasFlagAllProper(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(289)

//____________________________________________________________________________
// hasFlagDuplicate

inline bool hasFlagDuplicate(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(568)

//____________________________________________________________________________
// hasFlagFirst

inline bool hasFlagFirst(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(444)

//____________________________________________________________________________
// hasFlagLast

inline bool hasFlagLast(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(475)

//____________________________________________________________________________
// hasFlagMultiple

inline bool hasFlagMultiple(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(258)

//____________________________________________________________________________
// hasFlagNextRC

inline bool hasFlagNextRC(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(413)

//____________________________________________________________________________
// hasFlagNextUnmapped

inline bool hasFlagNextUnmapped(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(351)

//____________________________________________________________________________
// hasFlagQCNoPass

inline bool hasFlagQCNoPass(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(537)

//____________________________________________________________________________
// hasFlagRC

inline bool hasFlagRC(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(382)

//____________________________________________________________________________
// hasFlagSecondary

inline bool hasFlagSecondary(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(506)

//____________________________________________________________________________
// hasFlagUnmapped

inline bool hasFlagUnmapped(BamAlignmentRecord const & record);       	// "extras/include/seqan/bam_io/bam_alignment_record.h"(320)

//____________________________________________________________________________
// hasIndex

inline bool hasIndex(BamTagsDict const & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(154)
inline bool hasIndex(BamTagsDict & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(160)

//____________________________________________________________________________
// host

inline Host<BamTagsDict>::Type & host(BamTagsDict & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(127)
inline Host<BamTagsDict const>::Type & host(BamTagsDict const & bamTags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(133)

//____________________________________________________________________________
// jumpToPos

template <typename TNameStore, typename TNameStoreCache> inline bool jumpToPos(Stream<Bgzf> & stream, bool & hasAlignments, BamIOContext<TNameStore, TNameStoreCache> & bamIOContext, __int32 refId, __int32 pos, BamIndex<Bai> const & index);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(169)

//____________________________________________________________________________
// length

inline unsigned length(BamTagsDict const & tags);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(299)

//____________________________________________________________________________
// load

inline bool load(BamIndex<Bai> & index, char const * filename);       	// "extras/include/seqan/bam_io/bam_index_bai.h"(282)

//____________________________________________________________________________
// nameStore

template <typename TNameStore, typename TNameStoreCache> TNameStore & nameStore(BamIOContext<TNameStore, TNameStoreCache> & context);       	// "extras/include/seqan/bam_io/bam_io_context.h"(135)
template <typename TNameStore, typename TNameStoreCache> TNameStore const & nameStore(BamIOContext<TNameStore, TNameStoreCache> const & context);       	// "extras/include/seqan/bam_io/bam_io_context.h"(143)

//____________________________________________________________________________
// nameStoreCache

template <typename TNameStore, typename TNameStoreCache> TNameStoreCache & nameStoreCache(BamIOContext<TNameStore, TNameStoreCache> & context);       	// "extras/include/seqan/bam_io/bam_io_context.h"(168)
template <typename TNameStore, typename TNameStoreCache> TNameStoreCache const & nameStoreCache(BamIOContext<TNameStore, TNameStoreCache> const & context);       	// "extras/include/seqan/bam_io/bam_io_context.h"(176)

//____________________________________________________________________________
// nextIs

template <typename TStream, typename TPass> inline bool nextIs(RecordReader<TStream, TPass> & reader, SamHeader const & );       	// "extras/include/seqan/bam_io/read_sam.h"(86)
template <typename TStream, typename TPass> inline bool nextIs(RecordReader<TStream, TPass> & reader, SamAlignment const & );       	// "extras/include/seqan/bam_io/read_sam.h"(98)

//____________________________________________________________________________
// readRecord

template <typename TStream, typename TNameStore, typename TNameStoreCache> int readRecord(BamHeader & header, BamIOContext<TNameStore, TNameStoreCache> & context, TStream & stream, Bam const & );       	// "extras/include/seqan/bam_io/read_bam.h"(97)
template <typename TStream, typename TNameStore, typename TNameStoreCache> int readRecord(BamAlignmentRecord & record, BamIOContext<TNameStore, TNameStoreCache> & context, TStream & stream, Bam const & );       	// "extras/include/seqan/bam_io/read_bam.h"(190)
template <typename TStream, typename TSpec, typename TNameStore, typename TNameStoreCache> int readRecord(BamHeaderRecord & record, BamIOContext<TNameStore, TNameStoreCache> & , RecordReader<TStream, SinglePass<TSpec> > & reader, Sam const & );       	// "extras/include/seqan/bam_io/read_sam.h"(151)
template <typename TStream, typename TSpec, typename TNameStore, typename TNameStoreCache> int readRecord(BamHeader & header, BamIOContext<TNameStore, TNameStoreCache> & context, RecordReader<TStream, SinglePass<TSpec> > & reader, Sam const & tag);       	// "extras/include/seqan/bam_io/read_sam.h"(243)
template <typename TStream, typename TSpec, typename TNameStore, typename TNameStoreCache> int readRecord(BamAlignmentRecord & record, BamIOContext<TNameStore, TNameStoreCache> & context, RecordReader<TStream, SinglePass<TSpec> > & reader, Sam const & );       	// "extras/include/seqan/bam_io/read_sam.h"(297)

//____________________________________________________________________________
// setHost

inline void setHost(BamTagsDict & me, CharString & host_);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(277)
inline void setHost(BamTagsDict & me, CharString const & host_);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(285)

//____________________________________________________________________________
// setTagValue

template <typename T> inline bool setTagValue(BamTagsDict & tags, CharString const & key, T const & val, char const typeC);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(677)
template <typename T> inline bool setTagValue(BamTagsDict & tags, CharString const & key, T const & val);       	// "extras/include/seqan/bam_io/bam_tags_dict.h"(711)

//____________________________________________________________________________
// skipRecord

template <typename TStream, typename TPass> inline int skipRecord(RecordReader<TStream, TPass> & reader, SamHeader const & tag);       	// "extras/include/seqan/bam_io/read_sam.h"(111)
template <typename TStream, typename TPass> inline int skipRecord(RecordReader<TStream, TPass> & reader, SamAlignment const & tag);       	// "extras/include/seqan/bam_io/read_sam.h"(130)

//____________________________________________________________________________
// write2

template <typename TStream, typename TNameStore, typename TNameStoreCache> int write2(TStream & stream, BamHeader & header, BamIOContext<TNameStore, TNameStoreCache> & context, Bam const & );       	// "extras/include/seqan/bam_io/write_bam.h"(69)
template <typename TStream, typename TNameStore, typename TNameStoreCache> int write2(TStream & stream, BamAlignmentRecord & record, BamIOContext<TNameStore, TNameStoreCache> & , Bam const & );       	// "extras/include/seqan/bam_io/write_bam.h"(140)
template <typename TStream, typename TNameStore, typename TNameStoreCache> int write2(TStream & stream, BamHeaderRecord & header, BamIOContext<TNameStore, TNameStoreCache> & , Sam const & );       	// "extras/include/seqan/bam_io/write_sam.h"(67)
template <typename TStream, typename TNameStore, typename TNameStoreCache> int write2(TStream & stream, BamHeader & header, BamIOContext<TNameStore, TNameStoreCache> & context, Sam const & tag);       	// "extras/include/seqan/bam_io/write_sam.h"(101)
template <typename TStream, typename TNameStore, typename TNameStoreCache> int write2(TStream & stream, BamAlignmentRecord const & record, BamIOContext<TNameStore, TNameStoreCache> const & context, Sam const & );       	// "extras/include/seqan/bam_io/write_sam.h"(158)

} //namespace seqan

#endif

