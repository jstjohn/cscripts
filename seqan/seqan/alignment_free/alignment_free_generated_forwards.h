// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2010, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================


#ifndef SEQAN_HEADER_ALIGNMENT_FREE_GENERATED_FORWARDS_H 
#define SEQAN_HEADER_ALIGNMENT_FREE_GENERATED_FORWARDS_H 

//////////////////////////////////////////////////////////////////////////////
// NOTE: This file is automatically generated by build_forwards.py
//       Do not edit this file manually!
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// CLASSES
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// AFScore

template <typename TSpec> struct AFScore;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(54)

//____________________________________________________________________________
// D2Star_

struct D2Star_;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(136)

//____________________________________________________________________________
// D2_

struct D2_;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(85)

//____________________________________________________________________________
// D2z_

struct D2z_;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(310)

//____________________________________________________________________________
// N2_

struct N2_;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(214)

//____________________________________________________________________________
// UnmaskedAlphabet_

template <typename TAlphabet> struct UnmaskedAlphabet_;       	// "extras/include/seqan/alignment_free/kmer_functions.h"(47)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// TYPEDEFS
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// D2

typedef Tag<D2_> const D2;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(86)

//____________________________________________________________________________
// D2Star

typedef Tag<D2Star_> const D2Star;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(137)

//____________________________________________________________________________
// D2z

typedef Tag<D2z_> const D2z;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(311)

//____________________________________________________________________________
// N2

typedef Tag<N2_> const N2;       	// "extras/include/seqan/alignment_free/alignment_free_base.h"(215)

} //namespace seqan


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

namespace seqan {

//____________________________________________________________________________
// _alignmentFreeCompareCounts

template <typename TValue> void _alignmentFreeCompareCounts(TValue & result, String<unsigned> const & kmerCounts1, String<unsigned> const & kmerCounts2, AFScore<D2> const & );       	// "extras/include/seqan/alignment_free/af_d2.h"(109)
template <typename TValue, typename TStringBG> void _alignmentFreeCompareCounts(TValue & result, String<unsigned> const & kmerCounts1, TStringBG const & backgroundFrequencies1, String<unsigned> const & kmerCounts2, TStringBG const & backgroundFrequencies2, AFScore<D2z> const & score);       	// "extras/include/seqan/alignment_free/af_d2z.h"(503)
template <typename TAlphabet, typename TValue, typename TSpec> void _alignmentFreeCompareCounts(TValue & result, String<unsigned> const & kmerCounts1, MarkovModel<TAlphabet, TValue, TSpec> & bgModel1, String<unsigned> const & kmerCounts2, MarkovModel<TAlphabet, TValue, TSpec> & bgModel2, AFScore<D2z> const & score);       	// "extras/include/seqan/alignment_free/af_d2z.h"(553)
template <typename TValue, typename TString> void _alignmentFreeCompareCounts(TValue & result, String<unsigned> const revComIndex, TString const & kmerCounts1, TString const & kmerCounts2, AFScore<N2> const & score);       	// "extras/include/seqan/alignment_free/af_n2.h"(258)

//____________________________________________________________________________
// _alignmentFreeComparison

template <typename TStringSet, typename TValue> void _alignmentFreeComparison(Matrix<TValue, 2> & scoreMatrix, TStringSet const & sequenceSet, AFScore<D2> const & score);       	// "extras/include/seqan/alignment_free/af_d2.h"(52)
template <typename TValue, typename TStringSet> void _alignmentFreeComparison(Matrix<TValue, 2> & scoreMatrix, TStringSet const & sequenceSet, AFScore<D2Star> const & score);       	// "extras/include/seqan/alignment_free/af_d2star.h"(54)
template <typename TStringSet, typename TValue> void _alignmentFreeComparison(Matrix<TValue, 2> & scoreMatrix, TStringSet const & sequenceSet, AFScore<D2z> const & score);       	// "extras/include/seqan/alignment_free/af_d2z.h"(57)
template <typename TValue, typename TStringSet> void _alignmentFreeComparison(Matrix<TValue, 2> & scoreMatrix, TStringSet const & sequenceSet, AFScore<N2> const & score);       	// "extras/include/seqan/alignment_free/af_n2.h"(141)

//____________________________________________________________________________
// _computeWordProb

template <typename TAlphabet, typename TValue, typename TSpec> double _computeWordProb(long const word, MarkovModel<TAlphabet, TValue, TSpec> & bkg, unsigned const k, int const mo);       	// "extras/include/seqan/alignment_free/af_d2z.h"(589)

//____________________________________________________________________________
// _computeWordProbGivenPrefix

template <typename TAlphabet, typename TValue, typename TSpec> double _computeWordProbGivenPrefix(long const prefix, long const suffix, MarkovModel<TAlphabet, TValue, TSpec> & bkg, unsigned const k, unsigned const mo);       	// "extras/include/seqan/alignment_free/af_d2z.h"(603)

//____________________________________________________________________________
// _d2star

template <typename TValue, typename TSequence> void _d2star(TValue & result, TSequence const & sequence1, TSequence const & sequence2, AFScore<D2Star> const & score);       	// "extras/include/seqan/alignment_free/af_d2star.h"(93)

//____________________________________________________________________________
// _initialiseKmerNeighbourhood

void _initialiseKmerNeighbourhood(StringSet<String<unsigned> > & kmerNeighbourhood, unsigned const k, bool const revCom, String<unsigned> const & revComIndex);       	// "extras/include/seqan/alignment_free/af_n2.h"(76)

//____________________________________________________________________________
// _initialiseRevComIndex

void _initialiseRevComIndex(String<unsigned> & revComIndex, unsigned const k);       	// "extras/include/seqan/alignment_free/af_n2.h"(52)

//____________________________________________________________________________
// _standardiseCounts

template <typename TString, typename TSequence> void _standardiseCounts(TString & standardisedCounts, String<unsigned> const & revComIndex, StringSet<String<unsigned> > const & kmerNeighbourhood, TSequence const & sequence, AFScore<N2> const & score);       	// "extras/include/seqan/alignment_free/af_n2.h"(300)

//____________________________________________________________________________
// alignmentFreeComparison

template <typename TStringSet, typename TValue, typename TComparisonMethod> void alignmentFreeComparison(Matrix<TValue, 2> & scoreMatrix, TStringSet const & sequenceSet, TComparisonMethod const & comparisonMethod);       	// "extras/include/seqan/alignment_free/alignment_free_comparison.h"(96)

//____________________________________________________________________________
// calculateCovariance

template <typename TValue, typename TString, typename TStringBG> void calculateCovariance(TValue & covariance, TString const & word1, TString const & word2, TStringBG const & backgroundFrequencies, int const n);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(541)
template <typename TValue, typename TSpec, typename TAlphabet> void calculateCovariance(TValue & covariance, String<TAlphabet, TSpec> const & word1, String<TAlphabet, TSpec> const & word2, MarkovModel<TAlphabet, TValue> & bgModel, int const n);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(588)

//____________________________________________________________________________
// calculateOverlapIndicator

template <typename TString> void calculateOverlapIndicator(String<int> & epsilon, TString const & word1, TString const & word2);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(727)

//____________________________________________________________________________
// calculatePeriodicity

template <typename TString> void calculatePeriodicity(String<int> & periodicity, TString const & word1, TString const & word2);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(671)

//____________________________________________________________________________
// calculateProbability

template <typename TValue, typename TString, typename TStringBG> void calculateProbability(TValue & probability, TString const & sequence, TStringBG const & backgroundFrequencies);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(364)

//____________________________________________________________________________
// calculateVariance

template <typename TValue, typename TString, typename TStringBG> void calculateVariance(TValue & variance, TString const & word, TStringBG const & backgroundFrequencies, int const n);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(430)
template <typename TValue, typename TSpec, typename TAlphabet> void calculateVariance(TValue & variance, String<TAlphabet, TSpec> const & word, MarkovModel<TAlphabet, TValue> & bgModel, int const n);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(458)

//____________________________________________________________________________
// computeExpectationD2

template <typename TValue> double computeExpectationD2(int const len1, int const len2, unsigned const k, TValue const * q1, TValue const * q2);       	// "extras/include/seqan/alignment_free/af_d2z.h"(172)
template <typename TAlphabet, typename TValue, typename TSpec> double computeExpectationD2(int const slen1, int const slen2, unsigned const k, MarkovModel<TAlphabet, TValue, TSpec> & bkg1, MarkovModel<TAlphabet, TValue, TSpec> & bkg2, TValue & indicatorexpectation);       	// "extras/include/seqan/alignment_free/af_d2z.h"(197)

//____________________________________________________________________________
// computeVarianceD2

template <typename TValue> double computeVarianceD2(int len1, int len2, unsigned k, TValue * q1, TValue * q2);       	// "extras/include/seqan/alignment_free/af_d2z.h"(235)
template <typename TAlphabet, typename TValue, typename TSpec> double computeVarianceD2(int const slen1, int const slen2, unsigned const k, MarkovModel<TAlphabet, TValue, TSpec> & bkg1, MarkovModel<TAlphabet, TValue, TSpec> & bkg2, TValue indicatorexpectation);       	// "extras/include/seqan/alignment_free/af_d2z.h"(282)

//____________________________________________________________________________
// countKmers

template <typename TString> void countKmers(String<unsigned> & kmerCounts, TString const & sequence, unsigned const k);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(129)
template <typename TValueBG, typename TString> void countKmers(String<unsigned> & kmerCounts, String<TValueBG> & backgroundFrequencies, TString const & sequence, unsigned const k);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(176)
template <typename TString, typename TAlphabetBG, typename TValue> void countKmers(String<unsigned> & kmerCounts, MarkovModel<TAlphabetBG, TValue> & backgroundModel, TString const & sequence, unsigned k);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(266)

//____________________________________________________________________________
// cutNs

void cutNs(String<Dna5> & sequenceCut, String<Dna5> const & sequence);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(868)

//____________________________________________________________________________
// stringToStringSet

template <typename TString> void stringToStringSet(StringSet<TString> & stringSet, TString const & sequence);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(788)
void stringToStringSet(StringSet<String<Dna> > & dnaStringSet, String<Dna5> const & sequence);       	// "extras/include/seqan/alignment_free/kmer_functions.h"(795)

} //namespace seqan

#endif

